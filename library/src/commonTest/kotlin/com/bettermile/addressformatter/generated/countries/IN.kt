// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class IN {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Restaurant_in_Hyderabad() {
    // description: Restaurant in Hyderabad
    val components = mapOf("road" to "uppuguda", "city" to "Hyderabad", "neighbourhood" to "Patthergatti", "country" to "India", "country_code" to "IN", "postcode" to "500064", "restaurant" to "Anand Bhavan (vegetarian)", "state" to "Telangana", "suburb" to "Charminar")
    val expected = """
        |Anand Bhavan (vegetarian)
        |uppuguda
        |Charminar
        |Hyderabad - 500064
        |Telangana
        |India
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Indian_postcode() {
    // description: Indian postcode
    val components = mapOf("state" to "Mah훮r훮shtra", "postcode" to "400096", "country" to "India", "country_code" to "in")
    val expected = """
        |400096
        |Mah훮r훮shtra
        |India
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun without_postcode() {
    // description: without postcode
    val components = mapOf("city" to "Pune", "country" to "India", "country_code" to "in", "road" to "Baner", "state" to "Maharashtra")
    val expected = """
        |Baner
        |Pune
        |Maharashtra
        |India
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
