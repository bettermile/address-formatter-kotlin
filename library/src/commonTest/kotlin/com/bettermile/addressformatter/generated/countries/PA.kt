// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class PA {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Bed_Breakfast_in_Panama_City_8_99337_79_52075() {
    // description: Bed & Breakfast in Panama City, 8.99337,-79.52075
    val components = mapOf("city" to "Panamá", "country" to "Panamá", "country_code" to "pa", "guest_house" to "Panama House Bed & Breakfast", "road" to "Avenida 1 C Norte", "suburb" to "El Cangrejo")
    val expected = """
        |Panama House Bed & Breakfast
        |Avenida 1 C Norte
        |El Cangrejo
        |Ciudad de Panamá
        |Panamá
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun make_sure_no_double_Panama_City() {
    // description: make sure no double Panama City
    val components = mapOf("city" to "Panama City", "country" to "Panama", "country_code" to "pa", "guest_house" to "Panama House Bed & Breakfast", "road" to "Avenida 1 C Norte", "suburb" to "El Cangrejo")
    val expected = """
        |Panama House Bed & Breakfast
        |Avenida 1 C Norte
        |El Cangrejo
        |Panama City
        |Panama
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Pharmacy_in_Nueva_California_8_77977_82_64522() {
    // description: Pharmacy in Nueva California, 8.77977,-82.64522
    val components = mapOf("country" to "Panama", "country_code" to "pa", "hamlet" to "Nueva California", "pharmacy" to "Celina", "road" to "Volcan-Rio Sereno", "state" to "Chiriquí")
    val expected = """
        |Celina
        |Volcan-Rio Sereno
        |Nueva California
        |Chiriquí
        |Panama
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
