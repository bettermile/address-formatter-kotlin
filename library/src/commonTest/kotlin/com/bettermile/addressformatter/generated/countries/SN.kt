// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class SN {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Hotel_in_Dakar_14_66731_17_43996() {
    // description: Hotel in Dakar, 14.66731,-17.43996
    val components = mapOf("city" to "Dakar", "country" to "Senegal", "country_code" to "sn", "hotel" to "Hotel ndjambour", "postcode" to "24951", "road" to "Rue Carnot", "state" to "Dakar", "suburb" to "Plateau")
    val expected = """
        |Hotel ndjambour
        |Rue Carnot
        |24951 Dakar
        |Senegal
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun commune() {
    // description: commune
    val components = mapOf("commune" to "Commune de Yeumbeul Nord", "country" to "Senegal", "country_code" to "sn", "postcode" to "17000", "road" to "unnamed road", "state" to "Dakar Region", "state_district" to "DÃ©partement de Keur Massar", "town" to "Arrondissement de Yeumbeul")
    val expected = """
        |unnamed road
        |17000 Yeumbeul
        |Senegal
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
