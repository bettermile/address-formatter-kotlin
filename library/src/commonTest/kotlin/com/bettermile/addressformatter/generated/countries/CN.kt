// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class CN {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Building_in_Shanghai_31_23980_121_49316() {
    // description: Building in Shanghai, 31.23980,121.49316
    val components = mapOf("building" to "万向大厦", "country" to "China", "country_code" to "cn", "county" to "Pudong New District", "house_number" to "99号", "neighbourhood" to "Lijuazui", "postcode" to "200120", "road" to "West Lujiazui Road", "state" to "Shanghai")
    val expected = """
        |200120 China
        |Shanghai
        |Pudong New District
        |Lijuazui
        |West Lujiazui Road 99号
        |万向大厦
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Macau() {
    // description: Macau
    val components = mapOf("country" to "China", "country_code" to "cn", "region" to "Macau")
    val expected = """
        |Macau
        |China
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `null`() {
    // description: null
    val components = mapOf("city" to "Nyingchi", "country" to "China", "country_code" to "cn", "district" to "Bayi District", "postcode" to "860000", "region" to "Nyingchi Prefecture", "state" to "Tibet", "town" to "Bayi")
    val expected = """
        |860000 China
        |Tibet
        |Nyingchi
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
