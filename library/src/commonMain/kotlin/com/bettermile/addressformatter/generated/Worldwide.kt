// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated

import com.bettermile.addressformatter.CountryFormat
import com.bettermile.addressformatter.template.AddressTemplate
import com.bettermile.addressformatter.template.AddressTemplateDefinition
import kotlin.Lazy
import kotlin.String
import kotlin.collections.Map

internal object Worldwide {
  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{#first}} {{{road}}} || {{{place}}} || {{{hamlet}}} {{/first}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{postal_city}}} || {{{town}}} || {{{city}}} || {{{village}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{archipelago}}}\n{{{country}}}\n")
  private val generic1: AddressTemplate by lazy(AddressTemplates::generic1)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}, {{{quarter}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n")
  private val generic2: AddressTemplate by lazy(AddressTemplates::generic2)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{place}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{city}}} || {{{municipality}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic3: AddressTemplate by lazy(AddressTemplates::generic3)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{suburb}}} || {{{municipality}}} || {{{county}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n")
  private val generic4: AddressTemplate by lazy(AddressTemplates::generic4)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic5: AddressTemplate by lazy(AddressTemplates::generic5)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{{county}}}\n{{{state}}}\n{{{country}}}\n")
  private val generic6: AddressTemplate by lazy(AddressTemplates::generic6)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}}{{/first}}, {{{postcode}}}\n{{{country}}}\n")
  private val generic7: AddressTemplate by lazy(AddressTemplates::generic7)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}} {{#first}} {{{county_code}}} || {{{county}}} {{/first}}\n{{{country}}}\n")
  private val generic8: AddressTemplate by lazy(AddressTemplates::generic8)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic9: AddressTemplate by lazy(AddressTemplates::generic9)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{state}}}\n{{{country}}}\n{{{postcode}}}\n")
  private val generic10: AddressTemplate by lazy(AddressTemplates::generic10)

  @AddressTemplateDefinition("{{{country}}}\n{{{state}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{suburb}}}\n{{{road}}}, {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n")
  private val generic11: AddressTemplate by lazy(AddressTemplates::generic11)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} - {{{postcode}}}\n{{{state}}}\n{{{country}}}\n")
  private val generic12: AddressTemplate by lazy(AddressTemplates::generic12)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} || {{{region}}} {{/first}} {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n")
  private val generic13: AddressTemplate by lazy(AddressTemplates::generic13)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state_district}}} {{/first}}\n{{{state}}}\n{{{country}}}\n")
  private val generic14: AddressTemplate by lazy(AddressTemplates::generic14)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n")
  private val generic15: AddressTemplate by lazy(AddressTemplates::generic15)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic16: AddressTemplate by lazy(AddressTemplates::generic16)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic17: AddressTemplate by lazy(AddressTemplates::generic17)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic18: AddressTemplate by lazy(AddressTemplates::generic18)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{country}}}\n")
  private val generic19: AddressTemplate by lazy(AddressTemplates::generic19)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{country}}}\n")
  private val generic20: AddressTemplate by lazy(AddressTemplates::generic20)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic21: AddressTemplate by lazy(AddressTemplates::generic21)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{country}}}\n")
  private val generic22: AddressTemplate by lazy(AddressTemplates::generic22)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{quarter}}}\n{{#first}} {{{village}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} {{/first}}\n{{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n")
  private val generic23: AddressTemplate by lazy(AddressTemplates::generic23)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{place}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{island}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} || {{{region}}} || {{{island}}}, {{{archipelago}}} {{/first}}\n{{{country}}}\n")
  private val fallback1: AddressTemplate by lazy(AddressTemplates::fallback1)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{place}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{municipality}}} || {{{county}}} || {{{island}}} || {{{state_district}}} {{/first}}, {{#first}} {{{state}}} || {{{state_code}}} {{/first}}\n{{{country}}}\n")
  private val fallback2: AddressTemplate by lazy(AddressTemplates::fallback2)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{place}}}\n{{#first}} {{{suburb}}} || {{{island}}} {{/first}}\n{{#first}} {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{town}}} || {{{city}}}{{/first}}\n{{{county}}}\n{{#first}} {{{state}}} || {{{state_code}}} {{/first}}\n{{{country}}}\n")
  private val fallback3: AddressTemplate by lazy(AddressTemplates::fallback3)

  @AddressTemplateDefinition("{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{place}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{county}}} {{/first}}\n{{#first}} {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n")
  private val fallback4: AddressTemplate by lazy(AddressTemplates::fallback4)

  public val default: CountryFormat = CountryFormat(
        addressTemplate = generic1,
        fallbackTemplate = fallback1,
      )

  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "AE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{postcode}}} {{{country}}}\n",
    "AI_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{city_district}}} || {{{municipality}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "AL_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "AM_address_template",
  )
  @AddressTemplateDefinition(
    "{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{country}}} || {{{continent}}} {{/first}}\n",
    "AQ_address_template",
  )
  @AddressTemplateDefinition(
    "{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{country}}} || {{{continent}}} {{/first}}\n",
    "AQ_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} - {{{postcode}}}\n{{{country}}}\n",
    "BD_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{postal_city}}} || {{{town}}} || {{{city}}} || {{{village}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{archipelago}}}\n{{{country}}}\n",
    "BE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "BN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{village}}} || {{{hamlet}}}{{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} {{/first}} - {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "BR_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{{county}}}\n{{{country}}}\n",
    "BS_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}, {{{house}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "BT_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "BW_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state_district}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "CA_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state_district}}} || {{{region}}}{{/first}}, {{#first}} {{{state}}} || {{{state_code}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "CA_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state_district}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "CA_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state_district}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "CA_en_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}}, {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state_district}}} {{/first}} {{#first}} ({{{state_code}}}) || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "CA_fr_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{postal_city}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{village}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "CH_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{postal_city}}} || {{{town}}} || {{{city}}} || {{{village}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{region}}}\n{{{country}}}\n",
    "CL_address_template",
  )
  @AddressTemplateDefinition(
    "{{{postcode}}} {{{country}}}\n{{#first}} {{{state_code}}} || {{{state}}} || {{{state_district}}} || {{{region}}}{{/first}}\n{{{county}}}\n{{#first}}{{{city}}} || {{{town}}} || {{{municipality}}}|| {{{village}}}|| {{{hamlet}}}{{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}} {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "CN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{county}}}\n{{#first}}{{{city}}} || {{{town}}} || {{{municipality}}}|| {{{village}}}|| {{{hamlet}}}{{/first}}\n{{#first}} {{{state_code}}} || {{{state}}} || {{{state_district}}} || {{{region}}}{{/first}}\n{{{country}}} {{{postcode}}}\n",
    "CN_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{postcode}}} {{{country}}}\n{{#first}} {{{state_code}}} || {{{state}}} || {{{state_district}}} || {{{region}}}{{/first}}\n{{{county}}}\n{{#first}}{{{city}}} || {{{town}}} || {{{municipality}}}|| {{{village}}}|| {{{hamlet}}}{{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}} {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "CN_zh_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "CO_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{state}}}, {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{{country}}}\n",
    "CR_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{road}}} || {{{place}}} || {{{hamlet}}} {{/first}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{village}}} {{{postal_city}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{archipelago}}}\n{{{country}}}\n",
    "DE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{road}}} || {{{place}}} || {{{hamlet}}} {{/first}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{town}}} || {{{city}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{county}}} {{/first}}\n{{#first}} {{{state}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n",
    "DE_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{{state}}}\n{{{postcode}}}\n{{{country}}}\n",
    "DO_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "EC_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "EG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{municipality}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "GA_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}}-{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "GT_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{state_district}}}\n{{#first}} {{{state}}} || {{{country}}} {{/first}}\n",
    "HK_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{state_district}}}\n{{{state}}}\n{{{country}}}\n",
    "HK_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{state}}}\n{{{state_district}}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "HK_zh_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{road}}} {{{house_number}}}.\n{{{country}}}\n",
    "HU_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{state}}}\n{{{country}}}\n",
    "ID_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{{county}}}\n{{{postcode}}}\n{{{country}}}\n",
    "IE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{#first}} {{{city_district}}} || {{{neighbourhood}}} || {{{suburb}}} {{/first}}\n{{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "IQ_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{#first}}{{{province}}} || {{{state}}} || {{{state_district}}}{{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "IR_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{#first}}{{{state}}} || {{{state_district}}}{{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "IR_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{state}}}\n{{{state_district}}}\n{{#first}} {{{state}}} || {{{province}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n{{{postcode}}}\n",
    "IR_fa_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{state}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "JP_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{state}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "JP_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{postcode}}}\n{{#first}} {{{state}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "JP_ja_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "KE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "KH_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{country}}}\n",
    "KM_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{state}}} || {{{island}}} {{/first}}\n{{{country}}}\n",
    "KN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{state}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{{road}}} {{{house_number}}}\n{{{attention}}}\n{{{postcode}}}\n",
    "KR_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{state}}}\n{{{country}}}\n",
    "KR_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{state}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{{road}}} {{{house_number}}}\n{{{attention}}}\n{{{postcode}}}\n",
    "KR_ko_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n\n{{{road}}}\n{{{house_number}}} {{{house}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "KW_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "MD_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "MG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}, {{{postcode}}}\n{{{country}}}\n",
    "MM_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{city_district}}}\n{{#first}} {{{suburb}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "MN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{hamlet}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n",
    "MO_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{hamlet}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n",
    "MO_pt_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{hamlet}}} || {{{state_district}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "MO_zh_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{suburb}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "MT_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "MU_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "MX_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
    "MY_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}}\n{{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{country}}}\n",
    "NE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{state}}}\n{{{country}}}\n",
    "NG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{neighbourhood}}} || {{{city}}} {{/first}}\n{{#first}} {{{municipality}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "NP_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
    "OM_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
    "PA_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}} {{{state}}}\n{{{country}}}\n",
    "PG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}, {{#first}}{{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}}{{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{suburb}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{#first}} {{{municipality}}} {{{region}}} {{{state}}} {{/first}}\n{{{country}}}\n",
    "PH_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "PK_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{island}}} {{/first}}\n{{{country}}}\n",
    "PN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{island}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "RU_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}, {{#first}} {{{village}}} || {{{hamlet}}} || {{{city_district}}} || {{{suburb}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "SA_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{island}}} {{/first}}\n{{{island}}}\n{{{country}}}\n",
    "SC_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}, {{{quarter}}}\n{{{house_number}}} {{{road}}}, {{{residential}}}\n{{#first}} {{{country}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{hamlet}}} || {{{village}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "SG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{postal_city}}} || {{{city}}} || {{{town}}} || {{{village}}} || {{{municipality}}} || {{{city_district}}} || {{{hamlet}}} || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "SK_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} - {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
    "SV_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{village}}} || {{{hamlet}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{suburb}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{state}}} {{/first}}\n\n{{{country}}}\n",
    "SY_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "SZ_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house_number}}} {{{road}}}\n{{{quarter}}}\n{{#first}} {{{village}}} || {{{town}}} || {{{city}}} || {{{municipality}}} || {{{hamlet}}} || {{{county}}} {{/first}}\n{{{island}}}\n{{{country}}}\n",
    "TC_fallback_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{#first}} {{{village}}} || {{{hamlet}}} {{/first}}\n{{{road}}}\n{{#first}} {{{neighbourhood}}} || {{{city}}} || {{{town}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{state}}} {{{postcode}}}\n{{{country}}}\n",
    "TH_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{{postcode}}}\n{{{country}}}\n",
    "TT_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} || {{{island}}} {{/first}}\n{{{country}}}\n",
    "TV_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}} {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}} {{{road}}} {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "TW_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "TW_en_address_template",
  )
  @AddressTemplateDefinition(
    "{{{country}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}} {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}} {{{road}}} {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
    "TW_zh_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{municipality}}} {{/first}}\n{{#first}} {{{region}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "UA_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}\n{{#first}} {{{state}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n{{{postcode}}}\n",
    "UZ_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{hamlet}}} {{/first}} {{{postcode}}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
    "VE_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} {{/first}}, {{{island}}}\n{{{country}}}, {{{postcode}}}\n",
    "VG_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state_district}}} {{/first}}\n{{{state}}} {{{postcode}}}\n{{{country}}}\n",
    "VN_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
    "XK_address_template",
  )
  @AddressTemplateDefinition(
    "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{hamlet}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
    "ZA_address_template",
  )
  public val countries: Map<String, Lazy<CountryFormat>> = mapOf(
        "AD" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "AE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.AE_address_template,
          )
        },
        "AF" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "AG" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "AI" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.AI_address_template,
          )
        },
        "AL" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.AL_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{4}) ([^,]*)
                |""".trimMargin(), replacement = """
                |
                |${'$'}1-${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "AM" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.AM_address_template,
          )
        },
        "AO" to lazy {
          CountryFormat(
            addressTemplate = generic7,
          )
        },
        "AQ" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.AQ_address_template,
            fallbackTemplate = AddressTemplates.AQ_fallback_template,
          )
        },
        "AR" to lazy {
          CountryFormat(
            addressTemplate = generic9,
            replace = listOf(
              CountryFormat.Replace(search = "^Autonomous City of ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\w\d{4})(\w{3}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "AS" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=American Samoa",
          )
        },
        "AT" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "AU" to lazy {
          CountryFormat(
            addressTemplate = generic13,
          )
        },
        "AW" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "AX" to lazy {
          CountryFormat(
            useCountry = "FI",
            changeCountry = "Åland, Finland",
          )
        },
        "AZ" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "BA" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "BB" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "BD" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BD_address_template,
          )
        },
        "BE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BE_address_template,
          )
        },
        "BF" to lazy {
          CountryFormat(
            addressTemplate = generic6,
          )
        },
        "BG" to lazy {
          CountryFormat(
            addressTemplate = generic19,
          )
        },
        "BH" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "BI" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "BJ" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "BL" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Saint-Barthélemy, France",
          )
        },
        "BM" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "BN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BN_address_template,
          )
        },
        "BO" to lazy {
          CountryFormat(
            addressTemplate = generic17,
            replace = listOf(
              CountryFormat.Replace(search = "^Municipio Nuestra Senora de ", replacement = ""),
            ),
          )
        },
        "BQ" to lazy {
          CountryFormat(
            useCountry = "NL",
            changeCountry = "Caribbean Netherlands",
          )
        },
        "BR" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BR_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = "\\b(\\d{5})(\\d{3})\\b", replacement = "${'$'}1-${'$'}2"),
            ),
          )
        },
        "BS" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BS_address_template,
          )
        },
        "BT" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BT_address_template,
          )
        },
        "BV" to lazy {
          CountryFormat(
            useCountry = "NO",
            changeCountry = "Bouvet Island, Norway",
          )
        },
        "BW" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.BW_address_template,
          )
        },
        "BY" to lazy {
          CountryFormat(
            addressTemplate = generic11,
          )
        },
        "BZ" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "CA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CA_address_template,
            fallbackTemplate = AddressTemplates.CA_fallback_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | ([A-Za-z]{2}) ([A-Za-z]\d[A-Za-z])(\d[A-Za-z]\d)
                |""".trimMargin(), replacement = """
                | ${'$'}1 ${'$'}2 ${'$'}3
                |""".trimMargin()),
            ),
          )
        },
        "CA_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CA_en_address_template,
            fallbackTemplate = AddressTemplates.CA_en_fallback_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | ([A-Za-z]{2}) ([A-Za-z]\d[A-Za-z])(\d[A-Za-z]\d)
                |""".trimMargin(), replacement = """
                | ${'$'}1 ${'$'}2 ${'$'}3
                |""".trimMargin()),
            ),
          )
        },
        "CA_fr" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CA_fr_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | ([A-Za-z]{2}) ([A-Za-z]\d[A-Za-z])(\d[A-Za-z]\d)
                |""".trimMargin(), replacement = """
                | ${'$'}1 ${'$'}2 ${'$'}3
                |""".trimMargin()),
            ),
          )
        },
        "CC" to lazy {
          CountryFormat(
            useCountry = "AU",
            changeCountry = "Australia",
          )
        },
        "CD" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "CF" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "CG" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "CH" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CH_address_template,
            replace = listOf(
              CountryFormat.Replace(search = "Verwaltungskreis", replacement = ""),
              CountryFormat.Replace(search = "Verwaltungsregion", replacement = ""),
              CountryFormat.Replace(search = " administrative district", replacement = ""),
              CountryFormat.Replace(search = " administrative region", replacement = ""),
            ),
          )
        },
        "CI" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "CK" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "CL" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CL_address_template,
          )
        },
        "CM" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "CN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CN_address_template,
          )
        },
        "CN_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CN_en_address_template,
          )
        },
        "CN_zh" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CN_zh_address_template,
          )
        },
        "CO" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CO_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = "Localidad ", replacement = " "),
              CountryFormat.Replace(search = "Bogota, Bogota", replacement = "Bogota"),
              CountryFormat.Replace(search = "Bogota, Bogotá Distrito Capital", replacement = "Bogota"),
              CountryFormat.Replace(search = "Bogotá, Bogotá Distrito Capital", replacement = "Bogotá"),
            ),
          )
        },
        "CR" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.CR_address_template,
          )
        },
        "CU" to lazy {
          CountryFormat(
            addressTemplate = generic7,
          )
        },
        "CV" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{4}) ([^,]*)
                |""".trimMargin(), replacement = """
                |
                |${'$'}1-${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "CW" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "CX" to lazy {
          CountryFormat(
            useCountry = "AU",
            changeCountry = "Australia",
            addComponent = "state=Christmas Island",
          )
        },
        "CY" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "CZ" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            replace = listOf(
              CountryFormat.Replace(search = "^Capital City of ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{3})(\d{2}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "DE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.DE_address_template,
            fallbackTemplate = AddressTemplates.DE_fallback_template,
            replace = listOf(
              CountryFormat.Replace(search = "^Stadtteil ", replacement = ""),
              CountryFormat.Replace(search = "^Stadtbezirk (\\d+)", replacement = ""),
              CountryFormat.Replace(search = "^Ortsbeirat (\\d+) :", replacement = ""),
              CountryFormat.Replace(search = "^Gemeinde ", replacement = ""),
              CountryFormat.Replace(search = "^Gemeindeverwaltungsverband ", replacement = ""),
              CountryFormat.Replace(search = "^Landkreis ", replacement = ""),
              CountryFormat.Replace(search = "^Kreis ", replacement = ""),
              CountryFormat.Replace(search = "^Grenze ", replacement = ""),
              CountryFormat.Replace(search = "^Free State of ", replacement = ""),
              CountryFormat.Replace(search = "^Freistaat ", replacement = ""),
              CountryFormat.Replace(search = "^Regierungsbezirk ", replacement = ""),
              CountryFormat.Replace(search = "^Stadtgebiet ", replacement = ""),
              CountryFormat.Replace(search = "^Gemeindefreies Gebiet ", replacement = ""),
              CountryFormat.Replace(search = "city=Alt-Berlin", replacement = "Berlin"),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |Berlin
                |Berlin
                """.trimMargin(), replacement = "Berlin"),
              CountryFormat.Replace(search = """
                |Bremen
                |Bremen
                """.trimMargin(), replacement = "Bremen"),
              CountryFormat.Replace(search = """
                |Hamburg
                |Hamburg
                """.trimMargin(), replacement = "Hamburg"),
            ),
          )
        },
        "DJ" to lazy {
          CountryFormat(
            addressTemplate = generic16,
            replace = listOf(
              CountryFormat.Replace(search = "city=Djibouti", replacement = "Djibouti-Ville"),
            ),
          )
        },
        "DK" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            replace = listOf(
              CountryFormat.Replace(search = "^Capital Region of ", replacement = ""),
            ),
          )
        },
        "DM" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "DO" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.DO_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = ", Distrito Nacional", replacement = ", DN"),
            ),
          )
        },
        "DZ" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "EC" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.EC_address_template,
          )
        },
        "EG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.EG_address_template,
          )
        },
        "EE" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "EH" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "ER" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "ES" to lazy {
          CountryFormat(
            addressTemplate = generic15,
            fallbackTemplate = fallback4,
            replace = listOf(
              CountryFormat.Replace(search = "Autonomous Community of the", replacement = ""),
              CountryFormat.Replace(search = "Autonomous Community of", replacement = ""),
              CountryFormat.Replace(search = "^Community of ", replacement = ""),
            ),
          )
        },
        "ET" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "FI" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "FJ" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "FK" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "Falkland Islands, United Kingdom",
          )
        },
        "FM" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=Micronesia",
          )
        },
        "FO" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = "Territorial waters of Faroe Islands", replacement = "Faroe Islands"),
            ),
          )
        },
        "FR" to lazy {
          CountryFormat(
            addressTemplate = generic3,
            replace = listOf(
              CountryFormat.Replace(search = "Polynésie française, Îles du Vent \\(eaux territoriales\\)", replacement = "Polynésie française"),
              CountryFormat.Replace(search = "France, Mayotte \\(eaux territoriales\\)", replacement = "Mayotte, France"),
              CountryFormat.Replace(search = "France, La Réunion \\(eaux territoriales\\)", replacement = "La Réunion, France"),
              CountryFormat.Replace(search = "Grande Terre et récifs d'Entrecasteaux", replacement = ""),
              CountryFormat.Replace(search = "France, Nouvelle-Calédonie", replacement = "Nouvelle-Calédonie, France"),
              CountryFormat.Replace(search = "\\(eaux territoriales\\)", replacement = ""),
              CountryFormat.Replace(search = "state= \\(France\\)${'$'}", replacement = ""),
              CountryFormat.Replace(search = "Paris (\\d+)(\\w+) Arrondissement${'$'}", replacement = "Paris"),
            ),
          )
        },
        "GA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.GA_address_template,
          )
        },
        "GB" to lazy {
          CountryFormat(
            addressTemplate = generic23,
            fallbackTemplate = fallback3,
            replace = listOf(
              CountryFormat.Replace(search = "village= CP${'$'}", replacement = ""),
              CountryFormat.Replace(search = "^Borough of ", replacement = ""),
              CountryFormat.Replace(search = "^County( of)? ", replacement = ""),
              CountryFormat.Replace(search = "^Parish of ", replacement = ""),
              CountryFormat.Replace(search = "^Greater London", replacement = "London"),
              CountryFormat.Replace(search = "^London Borough of ", replacement = ""),
              CountryFormat.Replace(search = "Royal Borough of ", replacement = ""),
              CountryFormat.Replace(search = "County Borough of ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = "London, London", replacement = "London"),
              CountryFormat.Replace(search = "London, Greater London", replacement = "London"),
              CountryFormat.Replace(search = "City of Westminster", replacement = "London"),
              CountryFormat.Replace(search = "City of Nottingham", replacement = "Nottingham"),
              CountryFormat.Replace(search = ", United Kingdom${'$'}", replacement = """
                |
                |United Kingdom
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |London
                |England
                |United Kingdom
                """.trimMargin(), replacement = """
                |London
                |United Kingdom
                """.trimMargin()),
            ),
          )
        },
        "GD" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "GE" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "GF" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "France",
          )
        },
        "GG" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "Guernsey, Channel Islands",
          )
        },
        "GH" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "GI" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "GL" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "GM" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "GN" to lazy {
          CountryFormat(
            addressTemplate = generic14,
          )
        },
        "GP" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Guadeloupe, France",
          )
        },
        "GQ" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "GR" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            replace = listOf(
              CountryFormat.Replace(search = "Municipal Unit of ", replacement = ""),
              CountryFormat.Replace(search = "Regional Unit of ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{3})(\d{2}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "GS" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "United Kingdom",
            addComponent = "county=South Georgia",
          )
        },
        "GT" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.GT_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{5})- 
                """.trimMargin(), replacement = """
                |
                |${'$'}1-
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |
                | -
                """.trimMargin(), replacement = """
                |
                |""".trimMargin()),
            ),
          )
        },
        "GU" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=Guam",
          )
        },
        "GW" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "GY" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "HK" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.HK_address_template,
          )
        },
        "HK_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.HK_en_address_template,
          )
        },
        "HK_zh" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.HK_zh_address_template,
          )
        },
        "HM" to lazy {
          CountryFormat(
            useCountry = "AU",
            changeCountry = "Australia",
            addComponent = "state=Heard Island and McDonald Islands",
          )
        },
        "HN" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "HR" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "HT" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = " Commune de", replacement = " "),
            ),
          )
        },
        "HU" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.HU_address_template,
          )
        },
        "ID" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.ID_address_template,
          )
        },
        "IE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.IE_address_template,
            replace = listOf(
              CountryFormat.Replace(search = " City${'$'}", replacement = ""),
              CountryFormat.Replace(search = "The Municipal District of ", replacement = ""),
              CountryFormat.Replace(search = "The Metropolitan District of ", replacement = ""),
              CountryFormat.Replace(search = "Municipal District", replacement = ""),
              CountryFormat.Replace(search = "Electoral Division", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |Dublin
                |County Dublin
                """.trimMargin(), replacement = "Dublin"),
              CountryFormat.Replace(search = """
                |Dublin
                |Leinster
                """.trimMargin(), replacement = "Dublin"),
              CountryFormat.Replace(search = """
                |Galway
                |County Galway
                """.trimMargin(), replacement = "Galway"),
              CountryFormat.Replace(search = """
                |Kilkenny
                |County Kilkenny
                """.trimMargin(), replacement = "Kilkenny"),
              CountryFormat.Replace(search = """
                |Limerick
                |County Limerick
                """.trimMargin(), replacement = "Limerick"),
              CountryFormat.Replace(search = """
                |Tipperary
                |County Tipperary
                """.trimMargin(), replacement = "Tipperary"),
              CountryFormat.Replace(search = """
                |
                |(([AC-FHKNPRTV-Y][0-9]{2}|D6W))[ -]?([0-9AC-FHKNPRTV-Y]{4})
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}3
                """.trimMargin()),
            ),
          )
        },
        "IL" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "IM" to lazy {
          CountryFormat(
            useCountry = "GB",
          )
        },
        "IN" to lazy {
          CountryFormat(
            addressTemplate = generic12,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | -
                |""".trimMargin(), replacement = """
                |
                |""".trimMargin()),
            ),
          )
        },
        "IO" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "British Indian Ocean Territory, United Kingdom",
          )
        },
        "IQ" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.IQ_address_template,
          )
        },
        "IR" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.IR_address_template,
          )
        },
        "IR_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.IR_en_address_template,
          )
        },
        "IR_fa" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.IR_fa_address_template,
          )
        },
        "IS" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "IT" to lazy {
          CountryFormat(
            addressTemplate = generic8,
            replace = listOf(
              CountryFormat.Replace(search = "Città metropolitana di ", replacement = ""),
              CountryFormat.Replace(search = "Metropolitan City of ", replacement = ""),
              CountryFormat.Replace(search = "^Provincia di ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |Vatican City
                |Vatican City${'$'}
                """.trimMargin(), replacement = """
                |
                |Vatican City
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |Città del Vaticano
                |Città del Vaticano${'$'}
                """.trimMargin(), replacement = """
                |Città del Vaticano
                |""".trimMargin()),
            ),
          )
        },
        "JE" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "Jersey, Channel Islands",
          )
        },
        "JM" to lazy {
          CountryFormat(
            addressTemplate = generic20,
          )
        },
        "JO" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "JP" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.JP_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | (\d{3})(\d{4})
                |""".trimMargin(), replacement = """
                | ${'$'}1-${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "JP_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.JP_en_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | (\d{3})(\d{4})
                |""".trimMargin(), replacement = """
                | ${'$'}1-${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "JP_ja" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.JP_ja_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | (\d{3})(\d{4})
                |""".trimMargin(), replacement = """
                | ${'$'}1-${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "KE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KE_address_template,
          )
        },
        "KG" to lazy {
          CountryFormat(
            addressTemplate = generic11,
          )
        },
        "KH" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KH_address_template,
          )
        },
        "KI" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "KM" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KM_address_template,
          )
        },
        "KN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KN_address_template,
          )
        },
        "KP" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "KR" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KR_address_template,
          )
        },
        "KR_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KR_en_address_template,
          )
        },
        "KR_ko" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KR_ko_address_template,
          )
        },
        "KW" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.KW_address_template,
          )
        },
        "KY" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "KZ" to lazy {
          CountryFormat(
            addressTemplate = generic11,
          )
        },
        "LA" to lazy {
          CountryFormat(
            addressTemplate = generic22,
          )
        },
        "LB" to lazy {
          CountryFormat(
            addressTemplate = generic2,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                | (\d{4}) (\d{4})
                |""".trimMargin(), replacement = """
                | ${'$'}1 ${'$'}2
                |""".trimMargin()),
            ),
          )
        },
        "LC" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "LI" to lazy {
          CountryFormat(
            useCountry = "CH",
          )
        },
        "LK" to lazy {
          CountryFormat(
            addressTemplate = generic20,
          )
        },
        "LR" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "LS" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "LT" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "LU" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "LV" to lazy {
          CountryFormat(
            addressTemplate = generic7,
          )
        },
        "LY" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "MA" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "MC" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "MD" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MD_address_template,
          )
        },
        "ME" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "MF" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "France",
          )
        },
        "MH" to lazy {
          CountryFormat(
            useCountry = "US",
            addComponent = "state=Marshall Islands",
          )
        },
        "MG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MG_address_template,
          )
        },
        "MK" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "ML" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "MM" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MM_address_template,
          )
        },
        "MN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MN_address_template,
          )
        },
        "MO" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MO_address_template,
          )
        },
        "MO_pt" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MO_pt_address_template,
          )
        },
        "MO_zh" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MO_zh_address_template,
          )
        },
        "MP" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=Northern Mariana Islands",
          )
        },
        "MS" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "MT" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MT_address_template,
          )
        },
        "MQ" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Martinique, France",
          )
        },
        "MR" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "MU" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MU_address_template,
          )
        },
        "MV" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "MW" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "MX" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MX_address_template,
          )
        },
        "MY" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.MY_address_template,
          )
        },
        "MZ" to lazy {
          CountryFormat(
            addressTemplate = generic15,
            fallbackTemplate = fallback4,
          )
        },
        "NA" to lazy {
          CountryFormat(
            addressTemplate = generic2,
          )
        },
        "NC" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Nouvelle-Calédonie, France",
          )
        },
        "NE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.NE_address_template,
          )
        },
        "NF" to lazy {
          CountryFormat(
            useCountry = "AU",
            changeCountry = "Australia",
            addComponent = "state=Norfolk Island",
          )
        },
        "NG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.NG_address_template,
          )
        },
        "NI" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "NL" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{4})(\w{2}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |
                |Koninkrijk der Nederlanden${'$'}
                """.trimMargin(), replacement = """
                |
                |Nederland
                """.trimMargin()),
            ),
          )
        },
        "NO" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "NP" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.NP_address_template,
          )
        },
        "NR" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "NU" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "NZ" to lazy {
          CountryFormat(
            addressTemplate = generic20,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |Wellington
                |Wellington City
                """.trimMargin(), replacement = "Wellington"),
            ),
          )
        },
        "OM" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.OM_address_template,
          )
        },
        "PA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.PA_address_template,
            replace = listOf(
              CountryFormat.Replace(search = "city=Panama${'$'}", replacement = "Panama City"),
              CountryFormat.Replace(search = "city=Panamá${'$'}", replacement = "Ciudad de Panamá"),
            ),
          )
        },
        "PE" to lazy {
          CountryFormat(
            addressTemplate = generic19,
          )
        },
        "PF" to lazy {
          CountryFormat(
            replace = listOf(
              CountryFormat.Replace(search = "Polynésie française, Îles du Vent \\(eaux territoriales\\)", replacement = "Polynésie française"),
            ),
            useCountry = "FR",
            changeCountry = "Polynésie française, France",
          )
        },
        "PG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.PG_address_template,
          )
        },
        "PH" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.PH_address_template,
          )
        },
        "PK" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.PK_address_template,
          )
        },
        "PL" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{2})(\w{3}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1-${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "PM" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Saint-Pierre-et-Miquelon, France",
          )
        },
        "PN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.PN_address_template,
          )
        },
        "PR" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=Puerto Rico",
          )
        },
        "PS" to lazy {
          CountryFormat(
            useCountry = "IL",
          )
        },
        "PT" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{4})(\d{3}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1-${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "PW" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "PY" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "QA" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "RE" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "La Réunion, France",
          )
        },
        "RO" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "RS" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "RU" to lazy {
          CountryFormat(
            addressTemplate = generic10,
            fallbackTemplate = AddressTemplates.RU_fallback_template,
          )
        },
        "RW" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "SA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SA_address_template,
          )
        },
        "SB" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "SC" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SC_address_template,
          )
        },
        "SD" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "SE" to lazy {
          CountryFormat(
            addressTemplate = generic1,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{3})(\d{2}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "SG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SG_address_template,
          )
        },
        "SH" to lazy {
          CountryFormat(
            useCountry = "GB",
            changeCountry = "${'$'}state, United Kingdom",
          )
        },
        "SI" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "SJ" to lazy {
          CountryFormat(
            useCountry = "NO",
            changeCountry = "Norway",
          )
        },
        "SK" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SK_address_template,
            replace = listOf(
              CountryFormat.Replace(search = "^District of ", replacement = ""),
              CountryFormat.Replace(search = "^Region of ", replacement = ""),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |(\d{3})(\d{2}) 
                """.trimMargin(), replacement = """
                |
                |${'$'}1 ${'$'}2 
                """.trimMargin()),
            ),
          )
        },
        "SL" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "SM" to lazy {
          CountryFormat(
            useCountry = "IT",
          )
        },
        "SN" to lazy {
          CountryFormat(
            addressTemplate = generic3,
            replace = listOf(
              CountryFormat.Replace(search = "^Commune de ", replacement = ""),
              CountryFormat.Replace(search = "^Arrondissement de ", replacement = ""),
              CountryFormat.Replace(search = "^Département de ", replacement = ""),
            ),
          )
        },
        "SO" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "SR" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "SS" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "ST" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "SV" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SV_address_template,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |- 
                """.trimMargin(), replacement = """
                |
                | 
                """.trimMargin()),
            ),
          )
        },
        "SX" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "SY" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SY_address_template,
          )
        },
        "SZ" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.SZ_address_template,
          )
        },
        "TC" to lazy {
          CountryFormat(
            addressTemplate = generic23,
            fallbackTemplate = AddressTemplates.TC_fallback_template,
          )
        },
        "TD" to lazy {
          CountryFormat(
            addressTemplate = generic21,
          )
        },
        "TF" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Terres australes et antarctiques françaises, France",
          )
        },
        "TG" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "TH" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TH_address_template,
          )
        },
        "TJ" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "TK" to lazy {
          CountryFormat(
            useCountry = "NZ",
            changeCountry = "Tokelau, New Zealand",
          )
        },
        "TL" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "TM" to lazy {
          CountryFormat(
            addressTemplate = generic22,
          )
        },
        "TN" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "TO" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "TR" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "TT" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TT_address_template,
          )
        },
        "TV" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TV_address_template,
          )
        },
        "TW" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TW_address_template,
          )
        },
        "TW_en" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TW_en_address_template,
          )
        },
        "TW_zh" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.TW_zh_address_template,
          )
        },
        "TZ" to lazy {
          CountryFormat(
            addressTemplate = generic14,
            fallbackTemplate = generic14,
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |Dar es Salaam
                |Dar es Salaam
                """.trimMargin(), replacement = "Dar es Salaam"),
            ),
          )
        },
        "UA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.UA_address_template,
          )
        },
        "UG" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
        "UM" to lazy {
          CountryFormat(
            fallbackTemplate = fallback2,
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=US Minor Outlying Islands",
          )
        },
        "US" to lazy {
          CountryFormat(
            addressTemplate = generic4,
            fallbackTemplate = fallback2,
            replace = listOf(
              CountryFormat.Replace(search = "state=United States Virgin Islands", replacement = "US Virgin Islands"),
              CountryFormat.Replace(search = "state=USVI", replacement = "US Virgin Islands"),
            ),
            postformatReplace = listOf(
              CountryFormat.Replace(search = """
                |
                |US${'$'}
                """.trimMargin(), replacement = """
                |
                |United States of America
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |
                |USA${'$'}
                """.trimMargin(), replacement = """
                |
                |United States of America
                """.trimMargin()),
              CountryFormat.Replace(search = """
                |
                |United States${'$'}
                """.trimMargin(), replacement = """
                |
                |United States of America
                """.trimMargin()),
              CountryFormat.Replace(search = "Town of ", replacement = ""),
              CountryFormat.Replace(search = "Township of ", replacement = ""),
            ),
          )
        },
        "UZ" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.UZ_address_template,
          )
        },
        "UY" to lazy {
          CountryFormat(
            addressTemplate = generic1,
          )
        },
        "VA" to lazy {
          CountryFormat(
            useCountry = "IT",
          )
        },
        "VC" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "VE" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.VE_address_template,
          )
        },
        "VG" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.VG_address_template,
          )
        },
        "VI" to lazy {
          CountryFormat(
            useCountry = "US",
            changeCountry = "United States of America",
            addComponent = "state=US Virgin Islands",
          )
        },
        "VN" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.VN_address_template,
          )
        },
        "VU" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "WF" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Wallis-et-Futuna, France",
          )
        },
        "WS" to lazy {
          CountryFormat(
            addressTemplate = generic17,
          )
        },
        "XC" to lazy {
          CountryFormat(
            addressTemplate = generic6,
          )
        },
        "XK" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.XK_address_template,
          )
        },
        "YE" to lazy {
          CountryFormat(
            addressTemplate = generic18,
          )
        },
        "YT" to lazy {
          CountryFormat(
            useCountry = "FR",
            changeCountry = "Mayotte, France",
          )
        },
        "ZA" to lazy {
          CountryFormat(
            addressTemplate = AddressTemplates.ZA_address_template,
          )
        },
        "ZM" to lazy {
          CountryFormat(
            addressTemplate = generic3,
          )
        },
        "ZW" to lazy {
          CountryFormat(
            addressTemplate = generic16,
          )
        },
      )
}
