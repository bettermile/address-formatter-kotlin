package net.placemarkt.yamlconverter

import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.buildCodeBlock
import com.squareup.kotlinpoet.joinToCode
import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract

@OptIn(ExperimentalContracts::class)
inline fun generatedFileSpec(
    fileName: String,
    packageName: String = "net.placemarkt.generated",
    block: FileSpec.Builder.() -> Unit,
): FileSpec {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
    return FileSpec.builder(packageName = packageName, fileName = fileName)
        .addFileComment("THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY")
        .apply(block)
        .build()
}

fun multilineFunctionCall(functionName: String, elements: List<CodeBlock>): CodeBlock {
    return buildCodeBlock {
        add("$functionName(")
        indentParameters(elements)
    }
}

fun multilineFunctionCall(functionName: TypeName, elements: List<CodeBlock>): CodeBlock {
    return buildCodeBlock {
        add("%T(", functionName)
        indentParameters(elements)
    }
}

private fun CodeBlock.Builder.indentParameters(elements: List<CodeBlock>) {
    indent()
    add(elements.joinToCode(separator = ",\n", prefix = "\n", suffix = ",\n"))
    unindent()
    add(")")
}
