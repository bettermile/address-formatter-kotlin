// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class GB {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Lokku_office() {
    // description: Lokku office
    val components = mapOf("city" to "London", "city_district" to "London Borough of Islington",
        "country" to "United Kingdom", "country_code" to "GB", "house" to "Lokku Ltd",
        "house_number" to "82", "postcode" to "EC1M 5RF", "road" to "Clerkenwell Road",
        "state" to "England", "state_district" to "Greater London", "suburb" to "Clerkenwell")
    val expected = """
        |Lokku Ltd
        |82 Clerkenwell Road
        |London
        |EC1M 5RF
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Lokku_office_2() {
    // description: Lokku office
    val components = mapOf("country" to "United Kingdom", "country_code" to "GB",
        "county" to "Greater London", "local_administrative_area" to "City of London",
        "state" to "England", "suburb" to "Barbican")
    val expected = """
        |Barbican
        |City of London
        |London
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun London() {
    // description: London
    val components = mapOf("city" to "London", "country" to "United Kingdom",
        "country_code" to "GB", "county" to "London", "state" to "England",
        "state_district" to "Greater London")
    val expected = """
        |London
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Manchester() {
    // description: Manchester
    val components = mapOf("city" to "Manchester", "country" to "United Kingdom",
        "country_code" to "GB", "county" to "Manchester", "state" to "England")
    val expected = """
        |Manchester
        |England
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun just_a_suburb() {
    // description: just a suburb
    val components = mapOf("city" to "London", "city_district" to "London Borough of Islington",
        "country" to "United Kingdom", "country_code" to "gb", "county" to "London",
        "state" to "England", "state_district" to "Greater London", "suburb" to "Clerkenwell")
    val expected = """
        |Clerkenwell
        |London
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun City_of_Westminster_51_52089885_0_14007993() {
    // description: City of Westminster, 51.52089885, -0.14007993
    val components = mapOf("city" to "City of Westminster", "country" to "United Kingdom",
        "country_code" to "gb", "county" to "London", "house_number" to "115",
        "postcode" to "W1T 5DU", "road" to "New Cavendish Street", "state" to "England",
        "state_district" to "Greater London", "suburb" to "Fitzrovia",
        "university" to "University of Westminster")
    val expected = """
        |University of Westminster
        |115 New Cavendish Street
        |London
        |W1T 5DU
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun village_in_Cambridgeshire_52_281523_0_115179() {
    // description: village in Cambridgeshire, 52.281523,-0.115179
    val components = mapOf("country" to "United Kingdom", "country_code" to "gb",
        "county" to "Cambridgeshire", "postcode" to "PE28 9QA", "region" to "East of England",
        "state" to "England", "suburb" to "Fenstanton", "town" to "Huntingdonshire",
        "village" to "Hilton")
    val expected = """
        |Hilton
        |PE28 9QA
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Willoughby_House_Barbican() {
    // description: Willoughby House, Barbican
    val components = mapOf("building" to "Willoughby House", "city" to "London",
        "country" to "United Kingdom", "country_code" to "gb", "county" to "City of London",
        "postcode" to "EC2Y 9DP", "quarter" to "Barbican", "road" to "Moor Lane",
        "state" to "England", "state_district" to "Greater London")
    val expected = """
        |Willoughby House
        |Moor Lane
        |Barbican
        |London
        |EC2Y 9DP
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun City_of_Nottingham() {
    // description: City of Nottingham
    val components = mapOf("city" to "City of Nottingham", "country" to "United Kingdom",
        "country_code" to "gb", "house_number" to "121", "neighbourhood" to "Lace Market",
        "postcode" to "NG3 1NB", "road" to "Abbotsford Drive", "state" to "England",
        "state_district" to "East Midlands", "suburb" to "St Ann's")
    val expected = """
        |121 Abbotsford Drive
        |Nottingham
        |NG3 1NB
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun London_Borough_of_Waltham_Forest() {
    // description: London Borough of Waltham Forest
    val components = mapOf("city" to "London", "country" to "United Kingdom",
        "country_code" to "gb", "county" to "London Borough of Waltham Forest",
        "house_number" to "64", "neighbourhood" to "Walthamstow Village", "postcode" to "E10",
        "road" to "Melbourne Road", "state" to "England", "state_district" to "Greater London",
        "suburb" to "Leyton")
    val expected = """
        |64 Melbourne Road
        |London
        |E10
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun London_Borough_of_Waltham_Forest_partial_postcode() {
    // description: London Borough of Waltham Forest - partial_postcode
    val components = mapOf("city" to "London", "country" to "United Kingdom",
        "country_code" to "gb", "county" to "London Borough of Waltham Forest",
        "house_number" to "64", "neighbourhood" to "Walthamstow Village",
        "partial_postcode" to "E10", "road" to "Melbourne Road", "state" to "England",
        "state_district" to "Greater London", "suburb" to "Leyton")
    val expected = """
        |64 Melbourne Road
        |London
        |E10
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Prefer_town_over_city_Ossett_vs_Wakefield_() {
    // description: Prefer town over city (Ossett vs Wakefield)
    val components = mapOf("building" to "Orchard House", "city" to "Wakefield",
        "country" to "United Kingdom", "country_code" to "gb", "county" to "West Yorkshire",
        "postcode" to "WF5 8PG", "road" to "West Wells Road", "state" to "England",
        "state_code" to "ENG", "state_district" to "Yorkshire and the Humber", "town" to "Ossett")
    val expected = """
        |Orchard House
        |West Wells Road
        |Ossett
        |WF5 8PG
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Farmland() {
    // description: Farmland
    val components = mapOf("country" to "United Kingdom", "country_code" to "gb",
        "county" to "York", "farmland" to "Fair Field", "hamlet" to "Kexby", "state" to "England",
        "state_district" to "Yorkshire and the Humber")
    val expected = """
        |Fair Field
        |Kexby
        |York
        |England
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun suburb_before_city_district() {
    // description: suburb before city_district
    val components = mapOf("city" to "London", "city_district" to "London Borough of Hackney",
        "country" to "United Kingdom", "country_code" to "gb", "state" to "England",
        "state_code" to "ENG", "state_district" to "Greater London", "suburb" to "Hoxton")
    val expected = """
        |Hoxton
        |London
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun village_and_city() {
    // description: village and city
    val components = mapOf("city" to "Stratford-on-Avon", "country" to "United Kingdom",
        "country_code" to "gb", "county" to "Warwickshire", "state" to "England",
        "village" to "Welford on Avon CP")
    val expected = """
        |Welford on Avon
        |Stratford-on-Avon
        |Warwickshire
        |England
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun town_and_city() {
    // description: town and city
    val components = mapOf("city" to "East Hertfordshire", "country" to "United Kingdom",
        "country_code" to "gb", "county" to "Hertfordshire", "county_code" to "HRT",
        "state" to "England", "state_code" to "ENG", "town" to "Bishop's Stortford")
    val expected = """
        |Bishop's Stortford
        |Hertfordshire
        |England
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun place_name_with_in_name() {
    // description: place name with & in name
    val components = mapOf("city" to "London", "country" to "United Kingdom",
        "country_code" to "gb", "house" to "St. Judes & St. Pauls C of E (Va) Primary School",
        "house_number" to "10", "postcode" to "N1 4AZ", "road" to "Kingsbury Road")
    val expected = """
        |St. Judes & St. Pauls C of E (Va) Primary School
        |10 Kingsbury Road
        |London
        |N1 4AZ
        |United Kingdom
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
