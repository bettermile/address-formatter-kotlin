// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class IE {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Galway() {
    // description: Galway
    val components = mapOf("city" to "Galway City", "country" to "Ireland", "country_code" to "ie",
        "county" to "Galway City", "house_number" to "8-9", "road" to "Mainguard Street",
        "state_district" to "Connacht", "suburb" to "Claddagh")
    val expected = """
        |8-9 Mainguard Street
        |Claddagh
        |Galway
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Kilkenny() {
    // description: Kilkenny
    val components = mapOf("country" to "Ireland", "country_code" to "ie", "county" to "Kilkenny",
        "state" to "Leinster", "town" to "Kilkenny")
    val expected = """
        |Kilkenny
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Friar_s_Hill_Graiguenamanagh() {
    // description: Friar's Hill, Graiguenamanagh
    val components = mapOf("country" to "Ireland", "country_code" to "ie",
        "county" to "County Kilkenny", "residential" to "Friar's Hill",
        "state_district" to "Leinster", "town" to "Graiguenamanagh")
    val expected = """
        |Friar's Hill
        |Graiguenamanagh
        |County Kilkenny
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun condense_Dublin_County_Dublin_() {
    // description: condense "Dublin, County Dublin"
    val components = mapOf("city" to "Dublin", "city_district" to "Wood Quay A ED",
        "continent" to "Europe", "country" to "Ireland", "country_code" to "ie",
        "county" to "County Dublin", "county_code" to "D", "library" to "The National Archives",
        "postcode" to "D02 TD99", "road" to "Bishop Street", "state" to "Leinster",
        "state_code" to "L")
    val expected = """
        |The National Archives
        |Bishop Street
        |Wood Quay A ED
        |Dublin
        |D02 TD99
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun remove_The_Metropolitan_District_of_() {
    // description: remove "The Metropolitan District of"
    val components = mapOf("city" to "The Metropolitan District of Limerick City",
        "city_district" to "Farranshone", "country" to "Ireland", "country_code" to "ie",
        "county" to "County Limerick", "county_code" to "LK", "locality" to "Farranshone Beg",
        "road" to "Shelbourne Road", "road_reference" to "R464", "state" to "Munster")
    val expected = """
        |Shelbourne Road
        |Farranshone
        |Limerick
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun no_Electoral_Division_() {
    // description: no "Electoral Division"
    val components = mapOf("city_district" to "Clifden Electoral Division", "continent" to "Europe",
        "country" to "Ireland", "country_code" to "ie", "county" to "County Galway",
        "county_code" to "G", "guest_house" to "Connemara Country Lodge",
        "region" to "Conamara Municipal District", "road" to "N59", "state" to "Connacht",
        "state_code" to "C", "town" to "Clifden")
    val expected = """
        |Connemara Country Lodge
        |N59
        |Clifden
        |County Galway
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun format_Eircode_correctly_no_spaces_() {
    // description: format Eircode correctly (no spaces)
    val components = mapOf("building" to "G", "city_district" to "Maynooth ED",
        "continent" to "Europe", "country" to "Ireland", "country_code" to "ie",
        "county" to "County Kildare", "county_code" to "KE", "postcode" to "W23P466",
        "region" to "The Municipal District of Clane — Maynooth", "road" to "Ballygoran Road")
    val expected = """
        |G
        |Ballygoran Road
        |Maynooth ED
        |County Kildare
        |W23 P466
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun format_Eircode_correctly_dash_() {
    // description: format Eircode correctly (dash)
    val components = mapOf("building" to "G", "city_district" to "Maynooth ED",
        "continent" to "Europe", "country" to "Ireland", "country_code" to "ie",
        "county" to "County Kildare", "county_code" to "KE", "postcode" to "W23-P466",
        "region" to "The Municipal District of Clane — Maynooth", "road" to "Ballygoran Road")
    val expected = """
        |G
        |Ballygoran Road
        |Maynooth ED
        |County Kildare
        |W23 P466
        |Ireland
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
