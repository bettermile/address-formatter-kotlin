// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class CA {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Brampton_Centennial_Secondary_School() {
    // description: Brampton Centennial Secondary School
    val components = mapOf("city" to "Brampton", "country" to "Canada", "country_code" to "ca", "house_number" to "251", "postcode" to "L6Y 1Z4", "road" to "McMurchy Avenue South", "school" to "Brampton Centennial Secondary School", "state" to "Ontario", "suburb" to "Ridgehill")
    val expected = """
        |Brampton Centennial Secondary School
        |251 McMurchy Avenue South
        |Brampton, ON L6Y 1Z4
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun postcode_and_suburb() {
    // description: postcode and suburb
    val components = mapOf("city" to "Toronto", "country" to "Canada", "country_code" to "ca", "postcode" to "M6K1V2", "state" to "Ontario", "suburb" to "Parkdale")
    val expected = """
        |Parkdale
        |Toronto, ON M6K 1V2
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun city_state() {
    // description: city, state
    val components = mapOf("city" to "London", "country" to "Canada", "country_code" to "ca", "county" to "Middlesex County", "state" to "Ontario", "state_code" to "ON")
    val expected = """
        |London, Ontario
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun London_treated_as_county_42_95608_81_23792() {
    // description: London treated as county - 42.95608,-81.23792
    val components = mapOf("country" to "Canada", "country_code" to "ca", "county" to "London", "house_number" to "6", "neighbourhood" to "Lockwood Park", "postcode" to "N6C 2W9", "road" to "Cowan Avenue", "state" to "Ontario", "state_code" to "ON", "state_district" to "Southwestern Ontario")
    val expected = """
        |6 Cowan Avenue
        |London, ON N6C 2W9
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun no_housenumber() {
    // description: no housenumber
    val components = mapOf("city" to "Brampton", "country" to "Canada", "country_code" to "ca", "postcode" to "L6Y 1Z4", "road" to "McMurchy Avenue South", "school" to "Brampton Centennial Secondary School", "state" to "Ontario", "suburb" to "Ridgehill")
    val expected = """
        |Brampton Centennial Secondary School
        |McMurchy Avenue South
        |Brampton, ON L6Y 1Z4
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun just_county() {
    // description: just county
    val components = mapOf("country" to "Canada", "country_code" to "ca", "county" to "Springfield", "state" to "Manitoba")
    val expected = """
        |Springfield, Manitoba
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun locality() {
    // description: locality
    val components = mapOf("country" to "Canada", "country_code" to "ca", "county" to "Halton Region", "house_number" to "7931", "locality" to "Halton Hills", "municipality" to "Halton Hills", "postcode" to "L5N 8P7", "road" to "Tenth Line", "state" to "Ontario", "state_district" to "Golden Horseshoe")
    val expected = """
        |7931 Tenth Line
        |Halton Hills, ON L5N 8P7
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun postformat_replace_applied_to_abbreviated_street_type() {
    // description: postformat_replace applied to abbreviated street type
    val components = mapOf("country" to "Canada", "country_code" to "ca", "house_number" to "12345", "locality" to "St-Hyancinth", "postcode" to "J2T 3T5", "road" to "Av Demars")
    val expected = """
        |12345 Av Demars
        |St-Hyancinth, J2T 3T5
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Greater_Edmonton_Alberta_Canada() {
    val components = mapOf("country" to "Canada", "country_code" to "ca", "region" to "Greater Edmonton", "state" to "Alberta", "state_code" to "AB")
    val expected = """
        |Greater Edmonton, Alberta
        |Canada
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
