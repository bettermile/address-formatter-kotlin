// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class SK {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Bratislava_48_14776_17_10384() {
    // description: Bratislava - 48.14776,17.10384
    val components = mapOf("city" to "District of Bratislava",
        "city_district" to "Bratislava - mestská časť Staré Mesto", "country" to "Slovakia",
        "country_code" to "sk", "county" to "Bratislava", "house_number" to "666/20",
        "postcode" to "811 03", "road" to "Panenská", "state" to "Region of Bratislava",
        "suburb" to "Staré Mesto")
    val expected = """
        |Panenská 666/20
        |811 03 Bratislava
        |Slovakia
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Bratislava_town_and_city_fix_postcode_48_15744_17_10839() {
    // description: Bratislava town and city, fix postcode 48.15744,17.10839
    val components = mapOf("city" to "Bratislava", "city_district" to "District of Bratislava I",
        "country" to "Slovakia", "country_code" to "sk", "house_number" to "12",
        "neighbourhood" to "Desiatky", "postcode" to "81105", "road" to "Železničiarska",
        "state" to "Region of Bratislava", "state_code" to "BL", "town" to "Old Town")
    val expected = """
        |Železničiarska 12
        |811 05 Bratislava
        |Slovakia
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
