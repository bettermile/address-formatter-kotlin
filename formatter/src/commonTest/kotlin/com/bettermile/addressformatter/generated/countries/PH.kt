// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class PH {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun restaurant_in_Manila() {
    // description: restaurant in Manila
    val components = mapOf("house_number" to "1140", "road" to "Alhambra", "city" to "Ermita",
        "postcode" to "1000", "county" to "Fifth District", "country" to "Philippines",
        "country_code" to "PH", "restaurant" to "Emerald Garden", "state" to "Metro Manila",
        "suburb" to "Ermita")
    val expected = """
        |Emerald Garden
        |1140 Alhambra, Ermita
        |1000 Metro Manila
        |Philippines
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun archipelago() {
    // description: archipelago
    val components = mapOf("archipelago" to "Mindanao", "country" to "Philippines",
        "country_code" to "ph")
    val expected = """
        |Mindanao
        |Philippines
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun address() {
    // description: address
    val components = mapOf("house_number" to "121", "road" to "Epifanio Delos Santos Ave.",
        "city" to "Mandaluyong", "postcode" to "1550", "suburb" to "Wack-wack Greenhills",
        "county" to "Fifth District", "country" to "Philippines", "country_code" to "PH",
        "attention" to "Mr. Juan Maliksi", "state" to "Metro Manila")
    val expected = """
        |Mr. Juan Maliksi
        |121 Epifanio Delos Santos Ave., Wack-wack Greenhills, Mandaluyong
        |1550 Metro Manila
        |Philippines
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun address_city_district_instead_of_suburb() {
    // description: address - city_district instead of suburb
    val components = mapOf("house_number" to "121", "road" to "Epifanio Delos Santos Ave.",
        "city" to "Mandaluyong", "postcode" to "1550", "city_district" to "Wack-wack Greenhills",
        "county" to "Fifth District", "country" to "Philippines", "country_code" to "PH",
        "attention" to "Mr. Juan Maliksi", "state" to "Metro Manila")
    val expected = """
        |Mr. Juan Maliksi
        |121 Epifanio Delos Santos Ave., Wack-wack Greenhills, Mandaluyong
        |1550 Metro Manila
        |Philippines
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun address_ignore_additional_region() {
    // description: address - ignore additional region
    val components = mapOf("road" to "Gerona - Pura Road", "village" to "Poblacion 1",
        "postcode" to "2312", "municipality" to "Pura", "province" to "Tarlac",
        "region" to "Central Luzon", "country" to "Philippines", "country_code" to "PH",
        "attention" to "PYS Pharmacy")
    val expected = """
        |PYS Pharmacy
        |Gerona - Pura Road, Poblacion 1
        |2312 Pura
        |Philippines
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
