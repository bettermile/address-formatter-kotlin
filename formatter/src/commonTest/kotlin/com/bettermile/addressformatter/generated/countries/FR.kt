// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class FR {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Toulouse() {
    // description: Toulouse
    val components = mapOf("city" to "Toulouse", "country" to "France", "country_code" to "FR", "county" to "Toulouse", "house_number" to "17", "neighbourhood" to "Lafourguette", "postcode" to "31000", "road" to "Rue du Médecin-Colonel Calbairac", "state" to "Midi-Pyrénées", "suburb" to "Toulouse Ouest")
    val expected = """
        |17 Rue du Médecin-Colonel Calbairac
        |31000 Toulouse
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun remove_postcode_range() {
    // description: remove postcode range
    val components = mapOf("city" to "Mulhouse", "country" to "France", "country_code" to "fr", "county" to "Mulhouse", "postcode" to "68100;68200", "state" to "Alsace-Champagne-Ardenne-Lorraine")
    val expected = """
        |Mulhouse
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun House_in_Cayenne_4_93802_52_32985() {
    // description: House in Cayenne, 4.93802,-52.32985
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Cayenne", "house_number" to "53", "neighbourhood" to "Cité Floralies", "postcode" to "97300", "road" to "Rue du Lieutenant Becker", "state" to "French Guiana", "town" to "Cayenne")
    val expected = """
        |53 Rue du Lieutenant Becker
        |97300 Cayenne
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Office_in_Papeete_17_53714_149_56608() {
    // description: Office in Papeete, -17.53714,-149.56608
    val components = mapOf("building" to "Mairie (bureaux administratifs)", "city" to "Papeete", "country" to "Polynésie française, Îles du Vent (eaux territoriales)", "country_code" to "fr", "county" to "Îles du Vent", "postcode" to "98714", "road" to "Rue des Remparts", "state" to "French Polynesia")
    val expected = """
        |Mairie (bureaux administratifs)
        |Rue des Remparts
        |98714 Papeete
        |Polynésie française
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Government_building_in_Mamoudzou_12_77958_45_23145() {
    // description: Government building in Mamoudzou, -12.77958,45.23145
    val components = mapOf("building" to "Conseil Général de Mayotte", "country" to "France, Mayotte (eaux territoriales)", "country_code" to "fr", "postcode" to "97600", "road" to "Rue Houmadi Bacar", "state" to "Mayotte", "town" to "Mamoudzou")
    val expected = """
        |Conseil Général de Mayotte
        |Rue Houmadi Bacar
        |97600 Mamoudzou
        |Mayotte, France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Building_in_Le_Port_20_93750_55_29020() {
    // description: Building in Le Port, -20.93750,55.29020
    val components = mapOf("city" to "Le Port", "country" to "France, La Réunion (eaux territoriales)", "country_code" to "fr", "county" to "Saint-Paul", "house_number" to "17", "postcode" to "97420", "road" to "Rue François de Mahy", "state" to "Réunion")
    val expected = """
        |17 Rue François de Mahy
        |97420 Le Port
        |La Réunion, France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Building_in_Miquelon_47_10099_56_37706() {
    // description: Building in Miquelon, 47.10099,-56.37706
    val components = mapOf("building" to "Société nouvelle des pêches de Miquelon", "city" to "Miquelon-Langlade", "country" to "France", "country_code" to "fr", "postcode" to "97500", "road" to "Rue Jacques Vigneau", "state" to "Saint Pierre and Miquelon")
    val expected = """
        |Société nouvelle des pêches de Miquelon
        |Rue Jacques Vigneau
        |97500 Miquelon-Langlade
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Building_in_Noum_a_22_27039_166_44270() {
    // description: Building in Nouméa, -22.27039,166.44270
    val components = mapOf("building" to "Immeuble Maréchal Foch", "city" to "Nouméa", "city_district" to "Secteur Ouest", "country" to "France, Nouvelle-Calédonie, Grande Terre et récifs d'Entrecasteaux (eaux territoriales)", "country_code" to "fr", "county" to "Province Sud", "postcode" to "98800", "road" to "Rue Jean Jaurès", "state" to "New Caledonia", "suburb" to "Centre-Ville")
    val expected = """
        |Immeuble Maréchal Foch
        |Rue Jean Jaurès
        |98800 Nouméa
        |Nouvelle-Calédonie, France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun road_48_406168_2_55452() {
    // description: road, 48.406168,2.55452
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Fontainebleau", "postcode" to "77630", "road" to "Autoroute du Soleil", "road_reference" to "A 6", "road_reference_intl" to "E 15", "state" to "Ile-de-France", "village" to "Arbonne-la-Forêt")
    val expected = """
        |Autoroute du Soleil
        |77630 Arbonne-la-Forêt
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun road_reference_48_406168_2_55452() {
    // description: road_reference, 48.406168,2.55452
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Fontainebleau", "postcode" to "77630", "road_reference" to "A 6", "road_reference_intl" to "E 15", "state" to "Ile-de-France", "village" to "Arbonne-la-Forêt")
    val expected = """
        |A 6
        |77630 Arbonne-la-Forêt
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun road_reference_intl_48_406168_2_55452() {
    // description: road_reference_intl, 48.406168,2.55452
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Fontainebleau", "postcode" to "77630", "road_reference_intl" to "E 15", "state" to "Ile-de-France", "village" to "Arbonne-la-Forêt")
    val expected = """
        |E 15
        |77630 Arbonne-la-Forêt
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `43_42981_6_77514`() {
    // description: 43.42981,6.77514
    val components = mapOf("amenity" to "A1X4E0", "country" to "France", "country_code" to "fr", "county" to "Var", "municipality" to "Draguignan", "postcode" to "83700", "road" to "Avenue du XVe Corps", "state" to "Provence-Alpes-Côte dAzur", "suburb" to "Valescure", "town" to "Saint-Raphaël")
    val expected = """
        |A1X4E0
        |Avenue du XVe Corps
        |83700 Saint-Raphaël
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `48_8564_2_2961`() {
    // description: 48.8564, 2.2961
    val components = mapOf("city" to "Paris 7e Arrondissement", "country" to "France", "country_code" to "fr", "house_number" to "15", "postcode" to "75007", "state" to "Île-de-France", "state_district" to "Paris", "street" to "Avenue Charles Floquet")
    val expected = """
        |15 Avenue Charles Floquet
        |75007 Paris
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `45_08523_5_73302`() {
    // description: 45.08523,5.73302
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Isère", "house_number" to "83", "municipality" to "Grenoble", "neighbourhood" to "Lotissement des cartonneries", "postcode" to "38560", "road" to "Avenue Jean Navarre", "state" to "Auvergne-Rhône-Alpes", "state_code" to "ARA", "village" to "Champ-sur-Drac")
    val expected = """
        |83 Avenue Jean Navarre
        |38560 Champ-sur-Drac
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `7_06073496297967_6_60534772183623`() {
    // description: 7.06073496297967,6.60534772183623
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Doubs", "hamlet" to "Les Communaux", "house_number" to "20", "municipality" to "Pontarlier", "postcode" to "25500", "road" to "Rue Antoine de Roche", "state" to "Bourgogne-Franche-Comté", "state_code" to "BFC", "town" to "Morteau")
    val expected = """
        |20 Rue Antoine de Roche
        |25500 Morteau
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun `48_80868_7_78761`() {
    // description: 48.80868,7.78761
    val components = mapOf("country" to "France", "country_code" to "fr", "county" to "Bas-Rhin", "municipality" to "Haguenau-Wissembourg", "postcode" to "67500", "region" to "Metropolitan France", "road" to "Rue des Voituriers", "state" to "Grand Est", "state_code" to "GES", "town" to "Haguenau")
    val expected = """
        |Rue des Voituriers
        |67500 Haguenau
        |France
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
