// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class TC {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Shop_in_Providenciales_21_77988_72_26589() {
    // description: Shop in Providenciales, 21.77988,-72.26589
    val components = mapOf("country" to "Turks and Caicos Islands", "country_code" to "tc",
        "county" to "Provinciales and West Caicos", "neighbourhood" to "Five Cays",
        "road" to "Daffodil Close", "shop" to "Betty's market", "suburb" to "Millenium Hieghts",
        "town" to "Providenciales")
    val expected = """
        |Betty's market
        |Daffodil Close
        |Providenciales
        |Turks and Caicos Islands
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun hamlet_on_Middle_Caicos() {
    // description: hamlet on Middle Caicos
    val components = mapOf("country" to "Turks and Caicos Islands", "country_code" to "tc",
        "island" to "Middle Caicos", "hamlet" to "Bambarra")
    val expected = """
        |Bambarra
        |Middle Caicos
        |Turks and Caicos Islands
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
