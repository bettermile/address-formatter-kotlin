// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class SY {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Plastic_surgery_clinic_33_52042_36_29148() {
    // description: Plastic surgery clinic, 33.52042,36.29148
    val components = mapOf("city" to "Damascus", "clinic" to "Plastic Surgery Clinic",
        "country" to "Syria", "country_code" to "sy", "neighbourhood" to "Baramkeh",
        "pedestrian" to "سوق الصالحية", "state" to "Rif Dimashq", "suburb" to "Kafar Sousseh")
    val expected = """
        |Plastic Surgery Clinic
        |سوق الصالحية
        |Baramkeh
        |Damascus
        |Syria
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Plastic_surgery_clinic_language_ar_33_52042_36_29148() {
    // description: Plastic surgery clinic, language=ar, 33.52042,36.29148
    val components = mapOf("city" to "دمشق", "clinic" to "عيادة الجراحة التجميلية",
        "country" to "الجمهورية العربية السورية", "country_code" to "sy",
        "neighbourhood" to "البرامكة", "pedestrian" to "شارع جمال عبد الناصر",
        "state" to "ريف دمشق", "suburb" to "كفر سوسه")
    val expected = """
        |عيادة الجراحة التجميلية
        |شارع جمال عبد الناصر
        |البرامكة
        |دمشق
        |الجمهورية العربية السورية
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Pharmacy_33_51929_36_31770() {
    // description: Pharmacy, 33.51929,36.31770
    val components = mapOf("city" to "Damascus", "country" to "Syria", "country_code" to "sy",
        "pharmacy" to "Maooneh", "road" to "Albeirudi Street", "state" to "Rif Dimashq",
        "suburb" to "Soufanieh")
    val expected = """
        |Maooneh
        |Albeirudi Street
        |Soufanieh
        |Damascus
        |Syria
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Pharmacy_language_ar_33_51929_36_31770() {
    // description: Pharmacy, language=ar, 33.51929,36.31770
    val components = mapOf("city" to "دمشق", "country" to "الجمهورية العربية السورية",
        "country_code" to "sy", "pharmacy" to "المعونة", "road" to "شارع البيرودي",
        "state" to "ريف دمشق", "suburb" to "Soufanieh")
    val expected = """
        |المعونة
        |شارع البيرودي
        |Soufanieh
        |دمشق
        |الجمهورية العربية السورية
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Mosque_36_19821_37_15467() {
    // description: Mosque, 36.19821,37.15467
    val components = mapOf("city" to "Aleppo", "country" to "Syria", "country_code" to "sy",
        "neighbourhood" to "Al Jdeida", "pedestrian" to "Souq el Attarine",
        "place_of_worship" to "Al Bahramiyeh Mosque", "state" to "Aleppo",
        "suburb" to "حي باب النيرب")
    val expected = """
        |Al Bahramiyeh Mosque
        |Souq el Attarine
        |Al Jdeida
        |Aleppo
        |Syria
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
