// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class IT {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Barletta_street_address_41_312006_16_2704745() {
    // description: Barletta street address - 41.312006,16.2704745
    val components = mapOf("city" to "Barletta", "country" to "Italy", "country_code" to "it",
        "county" to "BT", "house_number" to "13", "postcode" to "76121", "road" to "Via Pisacane",
        "state" to "Apulia", "suburb" to "Montaltino")
    val expected = """
        |Via Pisacane 13
        |76121 Barletta BT
        |Italy
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Milano_correcty_add_county_code() {
    // description: Milano, correcty add county_code
    val components = mapOf("city" to "Milano", "country" to "Italy", "country_code" to "it",
        "county" to "Milano", "postcode" to "20147", "road" to "Via Giovanni Della Casa",
        "state" to "Lombardy", "suburb" to "Boldinasco")
    val expected = """
        |Via Giovanni Della Casa
        |20147 Milano MI
        |Italy
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Torino_correcty_add_county_code() {
    // description: Torino, correcty add county_code
    val components = mapOf("city" to "San Raffaele Cimena", "country" to "Italy",
        "country_code" to "it", "county" to "Torino", "postcode" to "10032",
        "road" to "Via Pertengo", "state" to "Piemonte")
    val expected = """
        |Via Pertengo
        |10032 San Raffaele Cimena TO
        |Italy
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Provincia_di_Torino_correcty_add_county_code() {
    // description: Provincia di Torino, correcty add county_code
    val components = mapOf("city" to "San Raffaele Cimena", "country" to "Italy",
        "country_code" to "it", "county" to "Provincia di Torino", "postcode" to "10032",
        "road" to "Via Pertengo", "state" to "Piemonte")
    val expected = """
        |Via Pertengo
        |10032 San Raffaele Cimena TO
        |Italy
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun deal_with_Citt_metropolitana_di_Firenze() {
    // description: deal with Città metropolitana di Firenze
    val components = mapOf("building" to "Palazzo Gondi", "city" to "Firenze",
        "country" to "Italia", "country_code" to "it", "county" to "Città metropolitana di Firenze",
        "pedestrian" to "Via dei Gondi", "postcode" to "50122", "state" to "TOS",
        "suburb" to "Quartiere 1")
    val expected = """
        |Palazzo Gondi
        |Via dei Gondi
        |50122 Firenze FI
        |Italia
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun clean_up_county() {
    // description: clean up county
    val components = mapOf("country" to "Italia", "country_code" to "it",
        "county" to "Provincia di Treviso", "postcode" to "31046", "road" to "Piazza Grande",
        "state" to "Veneto", "town" to "Oderzo")
    val expected = """
        |Piazza Grande
        |31046 Oderzo TV
        |Italia
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun clean_up_county_2() {
    // description: clean up county
    val components = mapOf("country" to "Italia", "country_code" to "it",
        "county" to "Province of Treviso", "postcode" to "31046", "road" to "Piazza Grande",
        "state" to "Veneto", "town" to "Oderzo")
    val expected = """
        |Piazza Grande
        |31046 Oderzo TV
        |Italia
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
