// Copyright 2022 GLS eCom Lab GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED, PLEASE DON'T CHANGE IT MANUALLY
package com.bettermile.addressformatter.generated.countries

import com.bettermile.addressformatter.AddressFormatter
import kotlin.test.Test
import kotlin.test.assertEquals

public class KR {
  private val addressFormatter: AddressFormatter =
      AddressFormatter(abbreviate = false, appendCountry = false)

  @Test
  public fun Hotel_in_Gangnam_Seoul_37_49675_127_02755() {
    // description: Hotel in Gangnam, Seoul, 37.49675,127.02755
    val components = mapOf("city" to "Seoul", "city_district" to "서초2동 (Seocho2-dong)",
        "country" to "South Korea", "country_code" to "kr", "hotel" to "Haeundae Grand Hotel",
        "postcode" to "135-934", "road" to "Seocho-daero 74-gil", "town" to "Seocho-gu",
        "village" to "Seocho-dong")
    val expected = """
        |South Korea
        |Seoul 서초2동 (Seocho2-dong) Seocho-daero 74-gil
        |Haeundae Grand Hotel
        |135-934
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun District_of_Seoul_fallback_() {
    // description: District of Seoul (fallback)
    val components = mapOf("city" to "서울특별시", "country" to "대한민국", "country_code" to "kr",
        "city_district" to "강남구")
    val expected = """
        |대한민국
        |서울특별시 강남구
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Sub_region_of_Gimpo_fallback_() {
    // description: Sub-region of Gimpo (fallback)
    val components = mapOf("state" to "경기도", "city" to "김포시", "country_code" to "kr",
        "neighbourhood" to "장기동")
    val expected = """
        |경기도 김포시 장기동
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Full_template_for_a_POI_Korean_language_() {
    // description: Full template for a POI (Korean language)
    val components = mapOf("city" to "서울특별시", "country_code" to "kr", "city_district" to "마포구",
        "road" to "동교로", "house_number" to "146", "attention" to "히트커피로스터스")
    val expected = """
        |서울특별시 마포구 동교로 146
        |히트커피로스터스
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }

  @Test
  public fun Fallback_template_for_a_POI_attention_at_the_end_() {
    // description: Fallback template for a POI (attention at the end)
    val components = mapOf("city" to "서울특별시", "country_code" to "kr", "city_district" to "마포구",
        "attention" to "히트커피로스터스")
    val expected = """
        |서울특별시 마포구
        |히트커피로스터스
        |""".trimMargin()
    val actual = addressFormatter.format(components = components)
    assertEquals(expected, actual)
  }
}
